%title: ANSIBLE
%author: pmerle


# ANSIBLE : Modules LINEINFILE


Documentation : 
	* https://docs.ansible.com/ansible/2.5/modules/lineinfile_module.html

PARAMETRES :

* attributes

* backrefs : pour utiliser des captures via regexp

* backup : réalise un backup avant modification

* create : si le fichier n'existe pas il est créé (default no)

* firstmatch : avec insertafter ou insertbefore s'exécute via la première occurence

* group : groupe propriétaire du fichier

* insertafter : insertion après la ligne recherché (default EOF > regex sans backrefs)

* insertbefore : idem after > mais avant la ligne

* line : ligne à ajouter ou remplacer (éventuellement avec la capture)

* mode : permissions (0755 ou u+rwx,g+rx,o+rx)

* owner : propriétaire du fichier

* path : chemin du fichier

* regexp : expression régulière permettant de rechercher la ligne (et éventuellement faire un capture)

* state : la ligne doit être présente/modifiée ou supprimée

* validate : commande de validation de la ligne

--------------------------------------------------------------------------------------

# ANSIBLE : Modules LINEINFILE


* cas le plus simple mais le moins courant : ajout d'une ligne

```
  - name: lineinfile
    lineinfile: 
      dest: /tmp/test.conf 
      line: "test"
      state: present
      create: True
```

Rq: si changement de line > nlle ligne

* recherche d'une ligne précise et modification

```
    lineinfile:
      dest: /tmp/test.conf
      line: "test 2"
      regexp: "^test$"
      state: present
      create: True
```

* modification avec capture

```
    lineinfile:
      dest: /tmp/test.conf
      line: 'je suis le nombre : \1'
      regexp: "^test ([0-2])$"
      backrefs: yes
      state: present
      create: True
```

Rq: si 2 runs attention

--------------------------------------------------------------------------------------

# ANSIBLE : Modules LINEINFILE


* commenter une ligne avec plus ou moins de précision

```
    lineinfile:
      dest: /tmp/test.conf
      line: '# \1'
      regexp: "(^je suis le nombre : [0-2])"
      backrefs: yes
      state: present
      create: True
```

* ajout avant une ligne

```
    lineinfile:
      dest: /tmp/test.conf
      line: "Ma nouvelle ligne"
      insertbefore: '# je suis le nombre : [0-2]'
      state: present
      create: True
```

Rq : idem after

--------------------------------------------------------------------------------------

# ANSIBLE : Modules LINEINFILE


* supprimer une ligne soit par regexp ou par line

```
  - name: lineinfile
    lineinfile:
      dest: /tmp/test.conf
      regexp: "^Ma nouvelle ligne"
      #line: "^Ma nouvelle ligne"
      state: absent
```

* avec backup avant modification

```
  - name: lineinfile
    lineinfile: 
      dest: /tmp/test.conf
      regexp: "^#"
      state: absent
      backup: yes
```
