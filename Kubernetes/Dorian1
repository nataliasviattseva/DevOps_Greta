--------------Prérequis : (les trois serveurs)
#Installation des paquets et des référentiels pour installer kubernetes

apt install curl apt-transport-https -y

curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg| gpg --dearmor -o /etc/apt/trusted.gpg.d/k8s.gpg

curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -

echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" | tee /etc/apt/sources.list.d/kubernetes.list

apt update

--------------cmdlet kube: (toujours les trois serveurs)

#Installer les éléments pour gérer le cluster
apt install wget git kubelet kubeadm kubectl -y

#Empêche la suppression automatique d'un des paquets
apt-mark hold kubelet kubeadm kubectl

#Vérifie l'installation des paquets
kubectl version --output=yaml

kubeadm version

--------------Swap:
#possible dégradation des perf si on laisse la swap
swapoff -a
free -h

--------------sysctl.conf

/etc/sysctl.conf

#Modules chargés par le kernel au moment du boot

# Enable kernel modules
modprobe overlay
modprobe br_netfilter
# Add some settings to sysctl
tee /etc/sysctl.d/kubernetes.conf<<EOF
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
net.ipv4.ip_forward = 1 EOF
# Reload sysctl
sysctl --system

--------------Docker
apt install -y gnupg2 software-properties-common ca-certificates

curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -

add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"

apt update

apt install -y containerd.io docker-ce docker-ce-cli

mkdir -p /etc/systemd/system/docker.service.d


#config du service docker
___
tee /etc/docker/daemon.json <<EOF
{
  "exec-opts": ["native.cgroupdriver=systemd"],
  "log-driver": "json-file",
  "log-opts": {
    "max-size": "100m"
  },
  "storage-driver": "overlay2"
}
EOF
___

#reboot les services
systemctl daemon-reload
systemctl restart docker
systemctl enable docker


#chargement des modules pour k8s
tee /etc/modules-load.d/k8s.conf <<EOF
overlay br_netfilter
EOF

modprobe overlay
modprobe br_netfilter

#routage et filtrage réseau
tee /etc/sysctl.d/kubernetes.conf<<EOF
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
net.ipv4.ip_forward = 1
EOF


--------------CRI:
#Récupération de la version de CRI
VER=$(curl -s https://api.github.com/repos/Mirantis/cri-dockerd/releases/latest|grep tag_name | cut -d '"' -f 4|sed 's/v//g')

echo $VER


#Téléchargement de l'archive et extraction
wget https://github.com/Mirantis/cri-dockerd/releases/download/v${VER}/cri-dockerd-${VER}.amd64.tgz

tar xvf cri-dockerd-${VER}.amd64.tgz

#Déplacement vers le dossier des binaires
mv cri-dockerd/cri-dockerd /usr/local/bin/

#Vérification de l'installation
cri-dockerd --version

#COnfiguration du service CRI et du socket
wget https://raw.githubusercontent.com/Mirantis/cri-dockerd/master/packaging/systemd/cri-docker.service

wget https://raw.githubusercontent.com/Mirantis/cri-dockerd/master/packaging/systemd/cri-docker.socket

mv cri-docker.socket cri-docker.service /etc/systemd/system/

sed -i -e 's,/usr/bin/cri-dockerd,/usr/local/bin/cri-dockerd,' /etc/systemd/system/cri-docker.service

#reboot des services
systemctl daemon-reload
systemctl enable cri-docker.service
systemctl enable --now cri-docker.socket

#vérification de la bonne installation
systemctl status cri-docker.socket
___________________________fin des commandes pour les 3 serveurs

___________________________début des opérations pour le master

--------------Le control plane:

#module de NAT et balancing
lsmod | grep br_netfilter

#active le service au boot
systemctl enable kubelet

#création d'un socket pour "écouter" les worker
kubeadm config images pull --cri-socket unix:///var/run/cri-dockerd.sock

#Création du cluster
kubeadm init --cri-socket unix:///run/cri-dockerd.sock --pod-network-cidr=10.244.0.0/16


!!!!!!!!! bien garder
kubeadm join 192.168.8.100:6443 --token al4nwx.lm96o79e8jummr3v \
        --discovery-token-ca-cert-hash sha256:9e3b21dca7e54a6f2f3e8f1dd3e71199b4efee1f9eedc2bd968e

#dossier de config de kube avec appels API
export KUBECONFIG=/etc/kubernetes/admin.conf

#Vérification du cluster
kubectl cluster-info

--------------Flannel:

#Récupération de la config du réseau virtuel
wget https://raw.githubusercontent.com/flannel-io/flannel/master/Documentation/kube-flannel.yml

#création de la ressource
kubectl apply -f kube-flannel.yml

#Vérification de la création de la ressource
kubectl get pods -n kube-flannel

#Vérification du master
kubectl get nodes -o wide

___________________________fin des commandes pour le master

kubeadm token create --print-join-command

kubeadm join 192.168.8.100:6443 --token tzfn4f.3w5kebqofs4xfyt4 --discovery-token-ca-cert-hash sha256:9e3b21dca7e54a6f2f3e8f1dd3e71199b4efee1f9eedc2bd968e5b3edaca307d --cri-socket unix:///run/cri-dockerd.sock

___________________________fin des commandes pour les worker
___________________________début des opérations pour le master

#Vérification du cluster
kubectl get nodes

#info détaillées sur le worker
kubectl describe node worker1

